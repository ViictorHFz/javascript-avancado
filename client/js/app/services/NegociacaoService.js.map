{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","get","map","Negociacao","Date","objeto","data","quantidade","valor","console","log","negociacao","ConnectionFactory","getConnection","NegociacaoDao","conexao","dao","adiciona","connection","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\r\n    constructor(){\r\n        this._http = new HttpService();\r\n    }\r\n\r\n\r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos.reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n\r\n        return this._http\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações da semana'); \r\n            });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n\r\n        return this._http\r\n            .get('negociacoes/anterior')\r\n            .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter negociações da semana anterior');\r\n            });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n \r\n        return this._http\r\n            .get('negociacoes/retrasada')\r\n            .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter negociacoes da semana retrasada');\r\n            });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação cadastrada com sucesso!')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar negociação')\r\n            });\r\n    }\r\n\r\n    lista() {\r\n        \r\n        return ConnectionFactory\r\n        .getConnection()\r\n        .then(connection => new NegociacaoDao(connection))\r\n        .then(dao => dao.listaTodos())\r\n        .catch(erro => {\r\n            console.log(erro);\r\n            throw new Error('Não foi possível obter as negociações!');\r\n        })\r\n    }\r\n\r\n    apaga() {\r\n\r\n        return ConnectionFactory\r\n        .getConnection()\r\n        .then(connection => new NegociacaoDao(connection))\r\n        .then(dao => dao.apagaTodos())\r\n        .then(mensagem => 'Negociacoes apagadas com sucesso!')\r\n        .catch(erro => {\r\n            console.log(erro);\r\n            throw new Error('Não foi possível apgar negociações!');\r\n        })\r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes =>\r\n                negociacoes.filter(negociacao =>\r\n                    !listaAtual.some(negociacaoExistente =>\r\n                        negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível importar as negociações!');\r\n            });\r\n    }\r\n}"]}